# Copyright 2023 SLSA Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: verify-token schedule

on:
  workflow_call:
    # NOTE: these inputs are not used. They are present
    # because the verify-token Action expects them
    # from the calling workflow.
    inputs:
      name1:
        type: string
      name2:
        type: string
      name3:
        type: string
      name4:
        type: string
      name5:
        type: string
      name6:
        type: string
      private-repository:
        type: boolean

permissions: {}

concurrency: "e2e.verify-token.reusable"

env:
  # TODO: Use a PAT token.
  GH_TOKEN: ${{ github.token }}
  ISSUE_REPOSITORY: ${{ github.repository }}

jobs:
  setup-generic:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      valid-token: ${{ steps.verify.outputs.slsa-token }}
      invalid-mask-token: ${{ steps.verify-invalid-mask.outputs.slsa-token }}
      invalid-sha1-token: ${{ steps.verify-invalid-sha1.outputs.slsa-token }}
    steps:
      # NOTE: to test this workflow on a dev branch, use:
      # curl -s -X POST -H "Accept: application/vnd.github.v3+json" \
      #   "https://api.github.com/repos/$USERNAME/example-package/actions/workflows/e2e.verify-token.schedule.yml/dispatches" \
      #   -d "{\"ref\":\"$BRANCH\"}" \
      #   -H "Authorization: token $GH_TOKEN"
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: setup
        uses: slsa-framework/slsa-github-generator/actions/delegator/setup-generic@main
        with:
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          slsa-rekor-log-public: true
          slsa-runner-label: "ubuntu-latest"
          slsa-build-action-path: "./actions/build-artifacts-composite"
          slsa-workflow-inputs: '{"name1":"value1","name2":"value2","name3":"value3","name4":"","name5":"value5","name6":"value6","private-repository":true}'
          # name4 has empty value and won't be obfuscated even though it's in the list.
          # The Action should trim the spaces automatically.
          slsa-workflow-masked-inputs: name2, name4,name6
          slsa-checkout-fetch-depth: 4
          slsa-checkout-sha1: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

      - id: verify
        env:
          SLSA_TOKEN: ${{ steps.setup.outputs.slsa-token }}
          CHECKOUT_FETCH_DEPTH: 4
          CHECKOUT_SHA1: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        run: |
          set -euo pipefail
          ./.github/workflows/scripts/verify-setup-generic.sh
          echo "slsa-token=$SLSA_TOKEN" >> "$GITHUB_OUTPUT"

      - id: setup-invalid-mask
        uses: slsa-framework/slsa-github-generator/actions/delegator/setup-generic@main
        with:
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          slsa-rekor-log-public: true
          slsa-runner-label: "ubuntu-latest"
          slsa-build-action-path: "./actions/build-artifacts-composite"
          slsa-workflow-inputs: '{"name1":"value1","name2":"value2","name3":"value3","name4":"","name5":"value5","name6":"value6","private-repository":true}'
          slsa-workflow-masked-inputs: name2, name4,name7 # name7 does not exist in the inputs.
          # NOTE: no fetch-depth or sha1 input provided.

      - id: verify-invalid-mask
        env:
          SLSA_TOKEN: ${{ steps.setup-invalid-mask.outputs.slsa-token }}
          CHECKOUT_FETCH_DEPTH: 1 # The default checkout depth is 1.
          CHECKOUT_SHA1: ""
        run: |
          set -euo pipefail
          ./.github/workflows/scripts/verify-setup-generic.sh
          echo "slsa-token=$SLSA_TOKEN" >> "$GITHUB_OUTPUT"

      - id: setup-invalid-sha1
        uses: slsa-framework/slsa-github-generator/actions/delegator/setup-generic@main
        with:
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          slsa-rekor-log-public: true
          slsa-runner-label: "ubuntu-latest"
          slsa-build-action-path: "./actions/build-artifacts-composite"
          slsa-workflow-inputs: '{"name1":"value1","name2":"value2","name3":"value3","name4":"","name5":"value5","name6":"value6","private-repository":true}'
          slsa-workflow-masked-inputs: name2, name4,name7 # name7 does not exist in the inputs.
          slsa-checkout-sha1: "aaaaa" # short input.
          # NOTE: no fetch-depth input provided.

      - id: verify-invalid-sha1
        env:
          SLSA_TOKEN: ${{ steps.setup-invalid-sha1.outputs.slsa-token }}
          CHECKOUT_FETCH_DEPTH: 1 # The default checkout depth is 1.
          CHECKOUT_SHA1: "aaaaa"
        run: |
          set -euo pipefail
          ./.github/workflows/scripts/verify-setup-generic.sh
          echo "slsa-token=$SLSA_TOKEN" >> "$GITHUB_OUTPUT"

  verify-token:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: [setup-generic]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: verify-builder
        uses: slsa-framework/slsa-github-generator/.github/actions/verify-token@main
        with:
          slsa-unverified-token: ${{ needs.setup-generic.outputs.valid-token }}
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          output-predicate: predicate.json
          builder-interface-type: "builder"

      - env:
          VERIFIED_TOKEN: ${{ steps.verify-builder.outputs.slsa-verified-token }}
          TOOL_REPOSITORY: ${{ steps.verify-builder.outputs.tool-repository }}
          TOOL_REF: ${{ steps.verify-builder.outputs.tool-ref }}
          PREDICATE: predicate.json
          CHECKOUT_FETCH_DEPTH: 4
          CHECKOUT_SHA1: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
          BUILDER_INTERFACE_TYPE: "builder"
        run: |
          ./.github/workflows/scripts/verify-verified-token.sh

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: verify-generator
        uses: slsa-framework/slsa-github-generator/.github/actions/verify-token@main
        continue-on-error: true
        with:
          slsa-unverified-token: ${{ needs.setup-generic.outputs.valid-token }}
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          output-predicate: predicate.json
          builder-interface-type: "generator" # Test the generator predicate generation.

      # For now, generator predicate generation should throw an error.
      - env:
          STATUS: ${{ steps.verify-generator.outcome }}
          VERIFIED_TOKEN: ${{ steps.verify-generator.outputs.slsa-verified-token }}
          TOOL_REPOSITORY: ${{ steps.verify-generator.outputs.tool-repository }}
          TOOL_REF: ${{ steps.verify-generator.outputs.tool-ref }}
          PREDICATE: predicate.json
          CHECKOUT_FETCH_DEPTH: 4
          CHECKOUT_SHA1: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
          BUILDER_INTERFACE_TYPE: "generator"
        run: |
          if [[ ${STATUS} != "failure" ]]; then
            echo "Generator predicate generation is not supported, got ${STATUS}"
            exit 1
          fi

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: verify-mismatch-recipient
        uses: slsa-framework/slsa-github-generator/.github/actions/verify-token@main
        continue-on-error: true
        with:
          slsa-unverified-token: ${{ steps.verify-builder.outputs.slsa-verified-token }}
          slsa-workflow-recipient: "elegator_generic_slsa3.yml"
          output-predicate: mismatch-recipient-predicate.json
          builder-interface-type: "builder"

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: verify-mismatch-token
        uses: slsa-framework/slsa-github-generator/.github/actions/verify-token@main
        continue-on-error: true
        with:
          slsa-unverified-token: aGVsbG8K
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          output-predicate: mismatch-token-predicate.json
          builder-interface-type: "builder"

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: verify-invalid-mask
        uses: slsa-framework/slsa-github-generator/.github/actions/verify-token@main
        continue-on-error: true
        with:
          # name7 does not exist in the inputs so it should trigger an error.
          slsa-unverified-token: ${{ needs.setup-generic.outputs.invalid-mask-token }}
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          output-predicate: invalid-mask-predicate.json
          builder-interface-type: "builder"

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: verify-invalid-sha1
        uses: slsa-framework/slsa-github-generator/.github/actions/verify-token@main
        continue-on-error: true
        with:
          # sha1 is too short so it should trigger an error.
          slsa-unverified-token: ${{ needs.setup-generic.outputs.invalid-sha1-token }}
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          output-predicate: invalid-sha1-predicate.json
          builder-interface-type: "builder"

      - env:
          SUCCESS: ${{ steps.verify-mismatch-recipient.outcome == 'failure' && steps.verify-mismatch-token.outcome == 'failure' && steps.verify-invalid-mask.outcome == 'failure' && steps.verify-invalid-sha1.outcome == 'failure' }}
        run: |
          [ "$SUCCESS" == "true" ]

      # TODO(1419): Add more tests that manipulate the token.

  if-succeed:
    needs: [setup-generic, verify-token]
    runs-on: ubuntu-latest
    # We use `== 'failure'` instead of ` != 'success'` because we want to ignore skipped jobs, if there are any.
    if: github.event_name != 'workflow_dispatch' && needs.verify-token.result != 'failure' && needs.setup-generic.result != 'failure'
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: slsa-framework/example-package
          ref: main
      - run: ./.github/workflows/scripts/e2e-report-success.sh

  if-failed:
    needs: [setup-generic, verify-token]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'workflow_dispatch' && (needs.verify-token.result == 'failure' || needs.setup-generic.result == 'failure')
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: slsa-framework/example-package
          ref: main
      - run: ./.github/workflows/scripts/e2e-report-failure.sh
