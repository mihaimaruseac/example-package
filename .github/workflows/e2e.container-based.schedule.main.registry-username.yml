on:
  schedule:
    # Twice a month scheduled cron for rebuilding the base builder image.
    - cron: "0 3 1,15 * *"
    # Verify container-based workflow with the base builder image daily.
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs:
      trigger_build:
        description: "Trigger a build"
        required: false
        default: false
        type: boolean

permissions: read-all

concurrency: "e2e.container-based.schedule.main.registry-username"

env:
  # TODO: Replace this token.
  GH_TOKEN: ${{ secrets.E2E_CONTAINER_TOKEN }}
  ISSUE_REPOSITORY: slsa-framework/slsa-github-generator

  PROVENANCE_NAME: attestation.intoto

  IMAGE_REGISTRY: ghcr.io
  # NOTE: This pushes a container image to a "package" under the
  # slsa-framework GitHub org.
  # The image name should be of the form: slsa-framework/example-package.<test name>
  IMAGE_NAME: slsa-framework/example-package.e2e.container-based.schedule.main.registry-username.slsa3

  REGISTRY_USERNAME: asraa
  REGISTRY_PASSWORD: ${{ secrets.E2E_DOCKER_TOKEN }}

jobs:
  # Rebuild the base image
  base-build:
    runs-on: ubuntu-latest
    if: inputs.trigger_build || (github.event_name == 'schedule' && github.event.schedule == '0 3 1,15 * *')
    permissions:
      contents: read # For reading repository contents.
      packages: write # For writing container images.
    steps:
      - name: Checkout the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Authenticate Docker
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        id: build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  base:
    runs-on: ubuntu-latest
    if: ${{ !inputs.trigger_build }}
    permissions:
      contents: read # For reading repository contents.
      packages: write # For writing container images.
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.image.outputs.digest }}
    steps:
      - name: Authenticate Docker
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Output image
        id: image
        run: |
          # NOTE: We need to use the image and digest in order to make sure
          # that the image we attest has not been modified.
          full_image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          docker pull "${full_image_name}:main"
          repo_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "${full_image_name}:main")
          echo "${repo_digest}"

          echo "image=${full_image_name}" >> "${GITHUB_OUTPUT}"
          echo "digest=${repo_digest#*@}" >> "${GITHUB_OUTPUT}"

          # try a docker pull
          docker pull "${full_image_name}@${repo_digest#*@}"

  build:
    permissions:
      id-token: write # For signing
      actions: read
      contents: write # For asset uploads
    needs: [base]
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_container-based_slsa3.yml@main
    with:
      builder-image: ${{ needs.base.outputs.image }}
      builder-digest: ${{ needs.base.outputs.digest }}
      config-path: ".github/configs-docker/app-config.toml"
      provenance-name: attestation.intoto
      compile-builder: true
      registry-username: ${REGISTRY_USERNAME}
    secrets:
      registry-password: ${{ secrets.E2E_DOCKER_TOKEN }}

  verify:
    runs-on: ubuntu-latest
    needs: [base, build]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ needs.build.outputs.build-outputs-name }}
          path: outputs
      - name: Get build artifact
        id: build
        run: |
          name=$(find outputs/ -type f | head -1)
          cp "${name}" .
          echo "name=$(basename "${name}")" >> "${GITHUB_OUTPUT}"
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ needs.build.outputs.attestations-download-name }}
          path: attestations
      - name: Get attestation
        id: att
        env:
          FOLDER: attestations
        run: |
          ls
          name=$(find "${FOLDER}"/ -type f | head -1)
          cp "${name}" .
          echo "name=$(basename "${name}")" >> "${GITHUB_OUTPUT}"
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.24"
      - env:
          BINARY: ${{ steps.build.outputs.name }}
          PROVENANCE: ${{ steps.att.outputs.name }}
        run: ./.github/workflows/scripts/e2e.container-based.default.verify.sh

  if-succeeded:
    runs-on: ubuntu-latest
    needs: [build, verify]
    # NOTE: The workflow is allowed to run for other event types but don't post
    # to issues unless it's a schedule event.
    if: github.event_name == 'schedule' && needs.build.result == 'success' && needs.verify.result == 'success'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - run: ./.github/workflows/scripts/e2e-report-success.sh

  if-failed:
    runs-on: ubuntu-latest
    needs: [build, verify]
    # NOTE: The workflow is allowed to run for other event types but don't post
    # to issues unless it's a schedule event.
    if: always() && github.event_name == 'schedule' && (needs.build.result == 'failure' || needs.verify.result == 'failure')
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - run: ./.github/workflows/scripts/e2e-report-failure.sh
